// Code generated by "enumer -type=TokenType,TransactionType -trimprefix=TokenType,TransactionType -transform=snake -output=transaction_enum.go -json -sql -text"; DO NOT EDIT.

package entity

import (
	"database/sql/driver"
	"encoding/json"
	"fmt"
	"strings"
)

const _TokenTypeName = "invliadeth"

var _TokenTypeIndex = [...]uint8{0, 7, 10}

const _TokenTypeLowerName = "invliadeth"

func (i TokenType) String() string {
	if i < 0 || i >= TokenType(len(_TokenTypeIndex)-1) {
		return fmt.Sprintf("TokenType(%d)", i)
	}
	return _TokenTypeName[_TokenTypeIndex[i]:_TokenTypeIndex[i+1]]
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _TokenTypeNoOp() {
	var x [1]struct{}
	_ = x[TokenTypeInvliad-(0)]
	_ = x[TokenTypeETH-(1)]
}

var _TokenTypeValues = []TokenType{TokenTypeInvliad, TokenTypeETH}

var _TokenTypeNameToValueMap = map[string]TokenType{
	_TokenTypeName[0:7]:       TokenTypeInvliad,
	_TokenTypeLowerName[0:7]:  TokenTypeInvliad,
	_TokenTypeName[7:10]:      TokenTypeETH,
	_TokenTypeLowerName[7:10]: TokenTypeETH,
}

var _TokenTypeNames = []string{
	_TokenTypeName[0:7],
	_TokenTypeName[7:10],
}

// TokenTypeString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func TokenTypeString(s string) (TokenType, error) {
	if val, ok := _TokenTypeNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _TokenTypeNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to TokenType values", s)
}

// TokenTypeValues returns all values of the enum
func TokenTypeValues() []TokenType {
	return _TokenTypeValues
}

// TokenTypeStrings returns a slice of all String values of the enum
func TokenTypeStrings() []string {
	strs := make([]string, len(_TokenTypeNames))
	copy(strs, _TokenTypeNames)
	return strs
}

// IsATokenType returns "true" if the value is listed in the enum definition. "false" otherwise
func (i TokenType) IsATokenType() bool {
	for _, v := range _TokenTypeValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalJSON implements the json.Marshaler interface for TokenType
func (i TokenType) MarshalJSON() ([]byte, error) {
	return json.Marshal(i.String())
}

// UnmarshalJSON implements the json.Unmarshaler interface for TokenType
func (i *TokenType) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("TokenType should be a string, got %s", data)
	}

	var err error
	*i, err = TokenTypeString(s)
	return err
}

// MarshalText implements the encoding.TextMarshaler interface for TokenType
func (i TokenType) MarshalText() ([]byte, error) {
	return []byte(i.String()), nil
}

// UnmarshalText implements the encoding.TextUnmarshaler interface for TokenType
func (i *TokenType) UnmarshalText(text []byte) error {
	var err error
	*i, err = TokenTypeString(string(text))
	return err
}

func (i TokenType) Value() (driver.Value, error) {
	return i.String(), nil
}

func (i *TokenType) Scan(value interface{}) error {
	if value == nil {
		return nil
	}

	var str string
	switch v := value.(type) {
	case []byte:
		str = string(v)
	case string:
		str = v
	case fmt.Stringer:
		str = v.String()
	default:
		return fmt.Errorf("invalid value of TokenType: %[1]T(%[1]v)", value)
	}

	val, err := TokenTypeString(str)
	if err != nil {
		return err
	}

	*i = val
	return nil
}

const _TransactionTypeName = "invaliddebitcredit"

var _TransactionTypeIndex = [...]uint8{0, 7, 12, 18}

const _TransactionTypeLowerName = "invaliddebitcredit"

func (i TransactionType) String() string {
	if i < 0 || i >= TransactionType(len(_TransactionTypeIndex)-1) {
		return fmt.Sprintf("TransactionType(%d)", i)
	}
	return _TransactionTypeName[_TransactionTypeIndex[i]:_TransactionTypeIndex[i+1]]
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _TransactionTypeNoOp() {
	var x [1]struct{}
	_ = x[TransactionTypeInvalid-(0)]
	_ = x[TransactionTypeDebit-(1)]
	_ = x[TransactionTypeCredit-(2)]
}

var _TransactionTypeValues = []TransactionType{TransactionTypeInvalid, TransactionTypeDebit, TransactionTypeCredit}

var _TransactionTypeNameToValueMap = map[string]TransactionType{
	_TransactionTypeName[0:7]:        TransactionTypeInvalid,
	_TransactionTypeLowerName[0:7]:   TransactionTypeInvalid,
	_TransactionTypeName[7:12]:       TransactionTypeDebit,
	_TransactionTypeLowerName[7:12]:  TransactionTypeDebit,
	_TransactionTypeName[12:18]:      TransactionTypeCredit,
	_TransactionTypeLowerName[12:18]: TransactionTypeCredit,
}

var _TransactionTypeNames = []string{
	_TransactionTypeName[0:7],
	_TransactionTypeName[7:12],
	_TransactionTypeName[12:18],
}

// TransactionTypeString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func TransactionTypeString(s string) (TransactionType, error) {
	if val, ok := _TransactionTypeNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _TransactionTypeNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to TransactionType values", s)
}

// TransactionTypeValues returns all values of the enum
func TransactionTypeValues() []TransactionType {
	return _TransactionTypeValues
}

// TransactionTypeStrings returns a slice of all String values of the enum
func TransactionTypeStrings() []string {
	strs := make([]string, len(_TransactionTypeNames))
	copy(strs, _TransactionTypeNames)
	return strs
}

// IsATransactionType returns "true" if the value is listed in the enum definition. "false" otherwise
func (i TransactionType) IsATransactionType() bool {
	for _, v := range _TransactionTypeValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalJSON implements the json.Marshaler interface for TransactionType
func (i TransactionType) MarshalJSON() ([]byte, error) {
	return json.Marshal(i.String())
}

// UnmarshalJSON implements the json.Unmarshaler interface for TransactionType
func (i *TransactionType) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("TransactionType should be a string, got %s", data)
	}

	var err error
	*i, err = TransactionTypeString(s)
	return err
}

// MarshalText implements the encoding.TextMarshaler interface for TransactionType
func (i TransactionType) MarshalText() ([]byte, error) {
	return []byte(i.String()), nil
}

// UnmarshalText implements the encoding.TextUnmarshaler interface for TransactionType
func (i *TransactionType) UnmarshalText(text []byte) error {
	var err error
	*i, err = TransactionTypeString(string(text))
	return err
}

func (i TransactionType) Value() (driver.Value, error) {
	return i.String(), nil
}

func (i *TransactionType) Scan(value interface{}) error {
	if value == nil {
		return nil
	}

	var str string
	switch v := value.(type) {
	case []byte:
		str = string(v)
	case string:
		str = v
	case fmt.Stringer:
		str = v.String()
	default:
		return fmt.Errorf("invalid value of TransactionType: %[1]T(%[1]v)", value)
	}

	val, err := TransactionTypeString(str)
	if err != nil {
		return err
	}

	*i = val
	return nil
}
