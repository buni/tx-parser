// Code generated by MockGen. DO NOT EDIT.
// Source: subscription.go
//
// Generated by this command:
//
//	mockgen -source=subscription.go -destination=mock/subscription_mocks.go -package contract_mock
//

// Package contract_mock is a generated GoMock package.
package contract_mock

import (
	context "context"
	reflect "reflect"

	dto "github.com/buni/tx-parser/internal/app/dto"
	entity "github.com/buni/tx-parser/internal/app/entity"
	gomock "go.uber.org/mock/gomock"
)

// MockSubscriptionRepository is a mock of SubscriptionRepository interface.
type MockSubscriptionRepository struct {
	ctrl     *gomock.Controller
	recorder *MockSubscriptionRepositoryMockRecorder
	isgomock struct{}
}

// MockSubscriptionRepositoryMockRecorder is the mock recorder for MockSubscriptionRepository.
type MockSubscriptionRepositoryMockRecorder struct {
	mock *MockSubscriptionRepository
}

// NewMockSubscriptionRepository creates a new mock instance.
func NewMockSubscriptionRepository(ctrl *gomock.Controller) *MockSubscriptionRepository {
	mock := &MockSubscriptionRepository{ctrl: ctrl}
	mock.recorder = &MockSubscriptionRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSubscriptionRepository) EXPECT() *MockSubscriptionRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockSubscriptionRepository) Create(ctx context.Context, sub entity.Subscription) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, sub)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockSubscriptionRepositoryMockRecorder) Create(ctx, sub any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockSubscriptionRepository)(nil).Create), ctx, sub)
}

// ListByAddresses mocks base method.
func (m *MockSubscriptionRepository) ListByAddresses(ctx context.Context, tokenType entity.TokenType, addresses []string) ([]entity.Subscription, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListByAddresses", ctx, tokenType, addresses)
	ret0, _ := ret[0].([]entity.Subscription)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListByAddresses indicates an expected call of ListByAddresses.
func (mr *MockSubscriptionRepositoryMockRecorder) ListByAddresses(ctx, tokenType, addresses any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListByAddresses", reflect.TypeOf((*MockSubscriptionRepository)(nil).ListByAddresses), ctx, tokenType, addresses)
}

// MockSubscriptionService is a mock of SubscriptionService interface.
type MockSubscriptionService struct {
	ctrl     *gomock.Controller
	recorder *MockSubscriptionServiceMockRecorder
	isgomock struct{}
}

// MockSubscriptionServiceMockRecorder is the mock recorder for MockSubscriptionService.
type MockSubscriptionServiceMockRecorder struct {
	mock *MockSubscriptionService
}

// NewMockSubscriptionService creates a new mock instance.
func NewMockSubscriptionService(ctrl *gomock.Controller) *MockSubscriptionService {
	mock := &MockSubscriptionService{ctrl: ctrl}
	mock.recorder = &MockSubscriptionServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSubscriptionService) EXPECT() *MockSubscriptionServiceMockRecorder {
	return m.recorder
}

// Subscribe mocks base method.
func (m *MockSubscriptionService) Subscribe(ctx context.Context, req *dto.SubscribeRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Subscribe", ctx, req)
	ret0, _ := ret[0].(error)
	return ret0
}

// Subscribe indicates an expected call of Subscribe.
func (mr *MockSubscriptionServiceMockRecorder) Subscribe(ctx, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Subscribe", reflect.TypeOf((*MockSubscriptionService)(nil).Subscribe), ctx, req)
}
