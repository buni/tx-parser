// Code generated by MockGen. DO NOT EDIT.
// Source: parser.go
//
// Generated by this command:
//
//	mockgen -source=parser.go -destination=mock/parser_mocks.go -package contract_mock
//

// Package contract_mock is a generated GoMock package.
package contract_mock

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockParserService is a mock of ParserService interface.
type MockParserService struct {
	ctrl     *gomock.Controller
	recorder *MockParserServiceMockRecorder
	isgomock struct{}
}

// MockParserServiceMockRecorder is the mock recorder for MockParserService.
type MockParserServiceMockRecorder struct {
	mock *MockParserService
}

// NewMockParserService creates a new mock instance.
func NewMockParserService(ctrl *gomock.Controller) *MockParserService {
	mock := &MockParserService{ctrl: ctrl}
	mock.recorder = &MockParserServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockParserService) EXPECT() *MockParserServiceMockRecorder {
	return m.recorder
}

// ParseBlock mocks base method.
func (m *MockParserService) ParseBlock(ctx context.Context, height string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ParseBlock", ctx, height)
	ret0, _ := ret[0].(error)
	return ret0
}

// ParseBlock indicates an expected call of ParseBlock.
func (mr *MockParserServiceMockRecorder) ParseBlock(ctx, height any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ParseBlock", reflect.TypeOf((*MockParserService)(nil).ParseBlock), ctx, height)
}

// ParseNextBlock mocks base method.
func (m *MockParserService) ParseNextBlock(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ParseNextBlock", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// ParseNextBlock indicates an expected call of ParseNextBlock.
func (mr *MockParserServiceMockRecorder) ParseNextBlock(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ParseNextBlock", reflect.TypeOf((*MockParserService)(nil).ParseNextBlock), ctx)
}
