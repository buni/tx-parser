// Code generated by MockGen. DO NOT EDIT.
// Source: block.go
//
// Generated by this command:
//
//	mockgen -source=block.go -destination=mock/block_mocks.go -package contract_mock
//

// Package contract_mock is a generated GoMock package.
package contract_mock

import (
	context "context"
	reflect "reflect"

	dto "github.com/buni/tx-parser/internal/app/dto"
	entity "github.com/buni/tx-parser/internal/app/entity"
	gomock "go.uber.org/mock/gomock"
)

// MockBlockRepository is a mock of BlockRepository interface.
type MockBlockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockBlockRepositoryMockRecorder
	isgomock struct{}
}

// MockBlockRepositoryMockRecorder is the mock recorder for MockBlockRepository.
type MockBlockRepositoryMockRecorder struct {
	mock *MockBlockRepository
}

// NewMockBlockRepository creates a new mock instance.
func NewMockBlockRepository(ctrl *gomock.Controller) *MockBlockRepository {
	mock := &MockBlockRepository{ctrl: ctrl}
	mock.recorder = &MockBlockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBlockRepository) EXPECT() *MockBlockRepositoryMockRecorder {
	return m.recorder
}

// GetHeight mocks base method.
func (m *MockBlockRepository) GetHeight(ctx context.Context, tokenType entity.TokenType) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetHeight", ctx, tokenType)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetHeight indicates an expected call of GetHeight.
func (mr *MockBlockRepositoryMockRecorder) GetHeight(ctx, tokenType any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHeight", reflect.TypeOf((*MockBlockRepository)(nil).GetHeight), ctx, tokenType)
}

// SetHeight mocks base method.
func (m *MockBlockRepository) SetHeight(ctx context.Context, tokenType entity.TokenType, height string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetHeight", ctx, tokenType, height)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetHeight indicates an expected call of SetHeight.
func (mr *MockBlockRepositoryMockRecorder) SetHeight(ctx, tokenType, height any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetHeight", reflect.TypeOf((*MockBlockRepository)(nil).SetHeight), ctx, tokenType, height)
}

// MockBlockService is a mock of BlockService interface.
type MockBlockService struct {
	ctrl     *gomock.Controller
	recorder *MockBlockServiceMockRecorder
	isgomock struct{}
}

// MockBlockServiceMockRecorder is the mock recorder for MockBlockService.
type MockBlockServiceMockRecorder struct {
	mock *MockBlockService
}

// NewMockBlockService creates a new mock instance.
func NewMockBlockService(ctrl *gomock.Controller) *MockBlockService {
	mock := &MockBlockService{ctrl: ctrl}
	mock.recorder = &MockBlockServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBlockService) EXPECT() *MockBlockServiceMockRecorder {
	return m.recorder
}

// GetCurrentBlock mocks base method.
func (m *MockBlockService) GetCurrentBlock(ctx context.Context, req *dto.GetCurrentBlockRequest) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCurrentBlock", ctx, req)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCurrentBlock indicates an expected call of GetCurrentBlock.
func (mr *MockBlockServiceMockRecorder) GetCurrentBlock(ctx, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCurrentBlock", reflect.TypeOf((*MockBlockService)(nil).GetCurrentBlock), ctx, req)
}
